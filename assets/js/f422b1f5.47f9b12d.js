"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[199],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,y=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_label:"Two Sum",sidebar_position:1,toc_min_heading_level:2},i="1. Two Sum",u={unversionedId:"array/two-sum",id:"array/two-sum",title:"1. Two Sum",description:"Link",source:"@site/docs/01-array/0001-two-sum.md",sourceDirName:"01-array",slug:"/array/two-sum",permalink:"/docs/array/two-sum",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-array/0001-two-sum.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Two Sum",sidebar_position:1,toc_min_heading_level:2},sidebar:"tutorialSidebar",previous:{title:"Array",permalink:"/docs/category/array"},next:{title:"String",permalink:"/docs/category/string"}},l={},s=[{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:2},{value:"Constraints",id:"constraints",level:2},{value:"Solution",id:"solution",level:2},{value:"Java",id:"java",level:3}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1-two-sum"},"1. Two Sum"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/two-sum/"},"Link")),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Given an array of integers nums\xa0and an integer target, return indices of the two numbers such that they add up to target."),(0,a.kt)("p",null,"You may assume that each input would have exactly one solution, and you may not use the same element twice."),(0,a.kt)("p",null,"You can return the answer in any order."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n")),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n")),(0,a.kt)("p",null,"Example 3:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [3,3], target = 6\nOutput: [0,1]\n")),(0,a.kt)("h2",{id:"constraints"},"Constraints"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2 <= nums.length <= 104")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-109 <= nums[i] <= 109")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-109 <= target <= 109")),(0,a.kt)("li",{parentName:"ul"},"Only one valid answer exists.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("h3",{id:"java"},"Java"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> numIndexMap = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int num1 = nums[i];\n            int num2 = target - num1;\n            if (numIndexMap.containsKey(num2)) {\n                return new int[] { i, numIndexMap.get(num2) };\n            }\n            numIndexMap.put(num1, i);\n        }\n        return new int[1];\n    }\n}\n")))}c.isMDXComponent=!0}}]);